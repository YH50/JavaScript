// 04_JSBasic02.js

// 변수 선언
// 자바 스크립트의 버전에 따라 변수선언이 많이 달라지는 중
// 브라우저를 대상으로 하는 ES2015 버전 이전 까진 var로 변수를 많이 지정했으나
// 이후 const, let 변수가 많이 쓰이게 됨.

// var 로 선언한 변수 사용 예시
var x = 3;
console.log("var x : ", x);
y = "이대호"; // 별도 변수 선언이 없어도 사용(대입, 저장) 가능
console.log("y: ", y);
// console.log("k : ", k);
// 선언이 없어도 값이 초기화되지 않으면 사용 불가
// 변수의 자료형이 존재하지 않아서 숫자와 문자를 자유롭게 수시로 바꾸면서 저장 간으
x = "삼";
y = 234;

s = function () {
  console.log("변수에 함수를 저장하고 변수 이름으로 호출함");
};
s();
console.log("------------------------------------");

// 상수형 변수 const
// java 의 static final 과 동일 역할을 하는 변수
// 변수의 생성과 함께 반드시 초기값이 있어야 하며 이후 저장된 값의 변경 불가

const z = 10;
console.log("const z : ", z);
// z : '전준우';    // Assignment to constant variable.
// const a;     // Missing initializer in const declaration

console.log("------------------------------------------");
// 블록스코프 : var 변수는 영역({}, 지역변수)과 상관없이 값에 접근이 가능함
if (true) {
  var a = 7;
}
console.log("a : ", a);
// 함수의 시작과 끝을 구분짓는 중괄호({,})는 영향을 받기 때문에 함수를 벗어나면 변수로 인식되지 못함

// 반면 const 변수(상수)는 블록 영역에 영향을 받아 접근이 구분됨
if (true) {
  const b = 8;
}
// console.log("b:", b);        // Error : b is not defined

// let : 값을 변경할 수 있는 변수를 사용하려면 앞에서 사용한 var 변수나
// 서버프로그래밍에서 주로 사용하는 let 변수를 사용해야함
// >> 값의 변경이 가능하고 변수 선언 시 값의 초기화가 필수가 아님.

// var & let 변수의 차이는 그리 많지는 않고 다른 점이 분명 있지만 현 시점에서 구분할 일이 많지는 않음

// const, var, let 의 차이점
// 1. 자바스크립트 변수는 선언, 할당, 사용의 단계로 구분됨
// 2. const & let : 그 사용영역이 구분되어 사용해야 하나, var 은 비교적 자유로움
// 3. const & let 변수 : 둘 다 반드시 선언 후 사용해야함, but var은 선언 없이 사용 가능
// 4. 선언 없이 사용된 변수는 모두 var 변수
// 선언 & 할당 없이 사용된 var 변수의 최초값 : undefined. 다만 서버에서는 이 점이 에러의 원인이 됨

// const
// >> 선언과 동시에 값이 반드시 초기화되어야 함
// 값은 초기화 이후 변경 불가
// 하나의 스코프({ }) 안에서만 유효하며, 하나의 스코프 안에서 중복 선언 불가
// 스코프를 벗어나면 변수는 소멸됨

// let
// 반드시 선언해서 사용해야 하나 초기값을 반드시 대입해야 하는 것은 아님
// 초기값이 없는 변수의 최초값 : undefined
// 변수값의 변경이 가능함.
// 하나의 스코프({ }) 안에서만 유효하며, 하나의 스코프 안에서 중복 선언 불가
// 스코프를 벗어나면 변수는 소멸됨

// var
// 선언, 할당, 사용이 위치와 무관하게 자유로움
// 스코프 상관없이 접근 가능
// 같은 스코프 안에서 중복 선언도 가능함. 이때 마지막 선언 및 대입 값이 현재값으로 인식됨
// 때문에 구조가 복잡한 함수 내에서는 현재값을 유추하는데 조금 불편함이 있음
// 값의 변경이 자유로운 나머지 의도한 값의 저장 및 유지가 실패할 가능성이 있음
// 함수의 영역을 벗어나는 스코프에만 영향을 받음

// 변수 선언과 선언 키워드 별 사용의 방향
// 1. 변수 선언에 기본적으로 const 를 사용하고 값을 바꿔서 사용해야하는 경우에 한하여 let 사용을 권장함
// 2. 변수에 객체가 대입되는 경우도 const 사용을 권장함
const obj = { kor: 98, eng: 89, mat: 90 };
console.log(obj);
// obj = { kor: 55, eng: 85, mat: 95 };    >> Error
obj.kor = 70;
obj.eng = 52;
obj.mat = 32;
console.log(obj);
// const 를 사용하면 의도치 않은 재할당을 방지해주기 때문에 데이터의 안전을 보장받을 수 있음

// 3. 재할당이 필요한 경우에 한하여 let 을 사용 >> 변수의 스코프(영역)은 최대한 좁게 만드는 것을 권장함
